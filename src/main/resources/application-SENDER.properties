# Use with Spring Profile SENDER "java -Dspring.profiles.active=SENDER"
spring.banner.location=classpath:true-connector-banner.txt

logging.config=classpath:logback-SENDER.xml

# Choose which events to log from list bellow
#auditableEvents=ALL,NONE,SELF_DESCRIPTION,SELF_DESCRIPTION_ALL,CONTRACT_OFFER,OFFERED_RESOURCE,REPRESENTATION,USER,EXCEPTION,CONNECTOR
# if left empty it will default to ALL
application.logging.auditableEvents=ALL

#GLOBAL PROPERTIES
#define the directory where you can find certificates
application.targetDirectory=
#SSL Settings for https communication (Related to Springboot)
#use https instead of http, if false the ssl settings can be empty
#Selfdescription SSL Settings
application.ssl.key-store.name=ssl-server.jks
application.ssl.key-store-password=changeit
application.ssl.key-password=changeit

# Values accepted 
# good -> only good check
# unknown -> only good and unknown check
# none -> no OCSP test needed
application.OCSP_RevocationCheckValue=none

# Check the configurations !!!
### App setup
server.port=8443
server.max-http-header-size=15360
server.ssl.key-alias=execution-core-container
server.ssl.key-password=${application.ssl.key-password}
server.ssl.key-store-password=${application.ssl.key-store-password}
server.ssl.key-store=${application.targetDirectory}${application.ssl.key-store.name}
server.ssl.key-store-provider=SUN
server.ssl.key-store-type=JKS
server.ssl.SHA256=AC3BCAED1F01C63E18D4E0994C48D18EB6F79D01844564A4BA8476BE2D17F5E4

#enable protocol validation (default=false)
#if false the Forward-To header is same as input
application.enableProtocolValidation=false
#true = checks if the protocol in Forward-To is correct (https/http://example.com || wss://example.com || idscp://example.com) based on selected configuration
#false = if the protocol in Forward-To is not correct it will overwrite it based on selected configuration
#application.websocket.isEnabled(wss) and camel.component.jetty.use-global-ssl-context-parameters(http/https) these properties influence the behavior
application.validateProtocol=true

### DAPS Parameters (for getting token)
application.isEnabledDapsInteraction=false
application.extendedTokenValidation=false
#Cache token(true) or always use new token(false)
application.tokenCaching=true
#Fetch and cache token on startup. application.tokenCaching must be true!
application.fetchTokenOnStartup=true
#v2,orbiter
application.dapsVersion=v2
#Orbiter
application.daps.orbiter.privateKey=
application.daps.orbiter.password=

application.dapsUrl= 
application.keyStoreName=
application.keyStorePassword=
application.keystoreAliasName=
application.trustStoreName=
application.trustStorePassword=
application.connectorUUID=
#DAPS URI for validating
application.dapsJWKSUrl=

#encode/decode payload on ECC boundaries - default value false
application.encodeDecodePayload=false

#Firewall
application.firewall.isEnabled=false

### Clearing-House
application.clearinghouse.isEnabledClearingHouse=false
application.clearinghouse.username=
application.clearinghouse.password=
#Clearing House endpoint and local dir for hashing
application.clearinghouse.baseUrl=
application.clearinghouse.logEndpoint=/messages/log/
application.clearinghouse.processEndpoint=/process/

#Connector URIs
application.connectorid=http://w3id.org/engrd/connector/consumer

#IDSCP2
application.idscp2.isEnabled=false
#define if the connector is used as receiver
application.isReceiver=false

#WSS Port
application.wss-server-port=8098

#Camel A endpoint
application.camelSenderPort=8887

#Camel B endpoint
application.camelReceiverPort=8889

#Open API Data APP
application.openDataAppReceiver=https://localhost:8083/data

# Body: binary
#application.openDataAppReceiverRouter=mixed
# Body: form-data
application.openDataAppReceiverRouter=form
# Body: http-header
#application.openDataAppReceiverRouter=http-header

# Body:binary
#application.eccHttpSendRouter=mixed
# Body: form-data
application.eccHttpSendRouter=form
# Body: http-header
#application.eccHttpSendRouter=http-header

## Health check properties
application.healthcheck.enabled=false
application.healthcheck.cron.expression=0 */5 * ? * *
# fixedDelay in ms
application.healthcheck.resourcemanager.cron.fixedDelay=60000

## Threshold in percentages - from max value
application.healthcheck.threshold.audit=5
application.healthcheck.threshold.cpu=0.5
application.healthcheck.threshold.memory=10.5

application.healthcheck.dataapp=https://localhost:8083/about/version
application.healthcheck.usagecontrol=https://localhost:8080/platoontec/PlatoonDataUsage/1.0/about/version

application.healthcheck.daps=${application.dapsJWKSUrl}
application.healthcheck.clearinghouse=

#Camel - Spring Boot
camel.ssl.config.key-managers.key-password=${application.ssl.key-password}
camel.ssl.config.key-managers.key-store.resource=${application.targetDirectory}${application.ssl.key-store.name}
camel.ssl.config.key-managers.key-store.password=${application.ssl.key-store-password}

#Camel - Jetty
#Camel routes SSL Settings
camel.component.jetty.keystore=${application.targetDirectory}${application.ssl.key-store.name}
camel.component.jetty.ssl-password=${application.ssl.key-store-password}
camel.component.jetty.ssl-key-password=${application.ssl.key-password}

# Enable WebSocket over Https -> Disable Idscp to use!
application.websocket.isEnabled=false
#Enable WS communication channel from/to DataAPP
application.dataApp.websocket.isEnabled=false

# scan in the com/foo/routes classpath
camel.xml-routes.directory=

# Usage Control App
application.isEnabledUsageControl=false
# platoon or mydata
application.usageControlVersion=platoon
# platoon URL
spring.ids.ucapp.baseUrl=https://localhost:8080/platoontec/PlatoonDataUsage/1.0/
spring.ids.ucapp.healthUrl=https://localhost:8080/platoontec/PlatoonDataUsage/1.0/about/version
# mydata URL
#spring.ids.ucapp.baseUrl=http://localhost:9552/

#Technical headers
application.technicalHeaders=header,Is-Enabled-DataApp-WebSocket,payload,Forward-To,Payload-Content-Type,Host

#SelfDescription
#number of consecutive failed attempts
application.user.lock.maxattempts=5
# duration for how long user will be locked
application.user.lock.duration=30
# time unit used for locking user, possible values are: SECONDS,MINUTES,HOURS,DAYS
application.user.lock.unit=MINUTES

##Password Validator
#Password length should be in between (for example) 8 and 16 characters, 0 disable rule
application.password.validator.minLength=8
application.password.validator.maxLength=16
#At least one Upper-case character, 0 disable rule
application.password.validator.minUpperCase=1
#At least one Lower-case character, 0 disable rule
application.password.validator.minLowerCase=1
#At least one digit, 0 disable rule
application.password.validator.minDigit=1
#At least one special character, 0 disable rule
application.password.validator.minSpecial=1

application.selfdescription.description=Sender Connector description
application.selfdescription.title=Sender Connector title
application.selfdescription.curator=http://sender.curatorURI.com
application.selfdescription.maintainer=http://sender.maintainerURI.com
application.selfdescription.registrateOnStartup=false
application.selfdescription.brokerURL=
application.selfdescription.filelocation=.
application.selfdescription.inboundModelVersion=4.0.0,4.1.0,4.1.2,4.2.0,4.2.1,4.2.2,4.2.3,4.2.4,4.2.5,4.2.6,4.2.7
application.selfdescription.defaultEndpoint=

#H2 properties
spring.datasource.url=jdbc:h2:file:./audit_logs_sender;CIPHER=AES
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.datasource.driver-class-name=org.h2.Driver

spring.jpa.show-sql=false
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.h2.console.enabled=true
spring.datasource.username=sa
spring.datasource.password=file_password password

#Springdoc
springdoc.packagesToScan=it.eng.idsa.businesslogic.web.rest
springdoc.pathsToMatch=/**
springdoc.writer-with-default-pretty-printer=true

#For logging the response over WSS set to DEBUG, else leave empty
#logging.level.it.eng.idsa.businesslogic.processor.sender.websocket.client=