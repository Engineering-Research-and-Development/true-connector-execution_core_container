### App setup
spring.banner.location=classpath:true-connector-banner.txt

logging.config=classpath:logback-RECEIVER.xml

application.logging.auditableEvents=CONNECTOR

logging.level.root=INFO
logging.level.it.eng.idsa.businesslogic=INFO
logging.pattern.console=%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger.%M - %msg%n

#define the directory where you can find certificates
application.targetDirectory=/cert/
#SSL Settings for https communication
#use https instead of http, if false the ssl settings can be empty
application.ssl.key-store.name=${KEYSTORE_NAME}
application.ssl.key-store-password=${KEYSTORE_PASSWORD}
application.ssl.key-password=${KEY_PASSWORD}
server.ssl.key-alias=${ALIAS}

server.port=8449
server.max-http-header-size=15360
server.ssl.key-store=${application.targetDirectory}${application.ssl.key-store.name}
server.ssl.key-password=${application.ssl.key-password}
server.ssl.key-store-password=${application.ssl.key-store-password}
server.ssl.key-store-provider=SUN
server.ssl.key-store-type=JKS
server.ssl.SHA256=AC3BCAED1F01C63E18D4E0994C48D18EB6F79D01844564A4BA8476BE2D17F5E4

# Values accepted 
# good -> only good check
# unknown -> only good and unknown check
# none -> no OCSP test needed
application.OCSP_RevocationCheckValue=none

#### Enable WebSocket over Https
application.dataApp.websocket.isEnabled=${WS_EDGE}
#Enabling WS between ECC
application.websocket.isEnabled=${WS_ECC}

### DAPS Parameters (for getting token)
application.isEnabledDapsInteraction=true
application.extendedTokenValidation=false
#Cache token(true) or always use new token(false)
application.tokenCaching=${CACHE_TOKEN}
#Fetch and cache token on startup. application.tokenCaching must be true!
application.fetchTokenOnStartup=${FETCH_TOKEN_ON_STARTUP}
#possible values: v2,orbiter
application.dapsVersion=v2

#AISEC v2 URL
application.dapsUrl=https://daps.aisec.fraunhofer.de/v2/token
#ORBITER URL
#application.dapsUrl=http://212.81.222.225:8084/token

#AISEC DAPS settings
application.keyStoreName=${DAPS_KEYSTORE_NAME}
application.keyStorePassword=${DAPS_KEYSTORE_PASSWORD}
application.keystoreAliasName=${DAPS_KEYSTORE_ALIAS}
application.dapsJWKSUrl=https://daps.aisec.fraunhofer.de/.well-known/jwks.json
#Not used if you use AISEC v2
application.connectorUUID=4c49777d-4718-4d5c-9afe-1057849c1256
application.trustStoreName=${TRUSTORE_NAME}
application.trustStorePassword=${TRUSTORE_PASSWORD}

#ORBITER DAPS settings
application.daps.orbiter.privateKey=ecc-producer.key
application.daps.orbiter.password=ecc-producer.pem


#enable protocol validation (default=false)
#if false the Forward-To header is same as input
application.enableProtocolValidation=false
#true = checks if the protocol in Forward-To is correct (https/http://example.com || wss://example.com || idscp://example.com) based on selected configuration
#false = if the protocol in Forward-To is not correct it will overwrite it based on selected configuration
#application.websocket.isEnabled(wss) and camel.component.jetty.use-global-ssl-context-parameters(http/https) these properties influence the behavior
application.validateProtocol=true

#encode/decode payload on ECC boundaries - default value false
application.encodeDecodePayload=false

# BROKER 
application.selfdescription.registrateOnStartup=false
application.selfdescription.brokerURL=${BROKER_URL}

#Firewall
application.firewall.isEnabled=true

### Clearng-House
application.clearinghouse.isEnabledClearingHouse=false
application.clearinghouse.username=
application.clearinghouse.password=
#Clearing House endpoint and local dir for hashing
application.clearinghouse.baseUrl=${CLEARING_HOUSE}
application.clearinghouse.logEndpoint=/messages/log/
application.clearinghouse.processEndpoint=/process/

#Connector ID
application.connectorid=${CONNECTOR_ID}

#IDSCP2 enabled
application.idscp2.isEnabled=${IDSCP2}
application.idscp.server.ttpUri=https://localhost/nonexistingdummy_ttp
#Define if the connector is used as receiver or sender
application.isReceiver=true

#WSS Port
application.wss-server-port=8086

#Camel A endpoint
application.camelSenderPort=8887

#Camel B endpoint
application.camelReceiverPort=8889

#Open API Data APP
application.openDataAppReceiver=${DATA_APP_ENDPOINT}

## Health check properties
application.healthcheck.enabled=false
application.healthcheck.cron.expression=0 */5 * ? * *
# fixedDelay in ms
application.healthcheck.resourcemanager.cron.fixedDelay=60000

## Threshold in percentages - from max value
application.healthcheck.threshold.audit=5
application.healthcheck.threshold.cpu=0.5
application.healthcheck.threshold.memory=10.5
application.healthcheck.dataapp=${DATA_APP_HEALTH_ENDPOINT}
application.healthcheck.usagecontrol=${UC_DATAAPP_HEALTH_URI}

# Multipart Body between Execution Core Container and Data APP
application.openDataAppReceiverRouter=${MULTIPART_EDGE}

#Multipart Body between connectors
application.eccHttpSendRouter=${MULTIPART_ECC}

#Camel - Spring Boot
camel.ssl.config.key-managers.key-password=${application.ssl.key-password}
camel.ssl.config.key-managers.key-store.resource=${application.targetDirectory}${application.ssl.key-store.name}
camel.ssl.config.key-managers.key-store.password=${application.ssl.key-store-password}

#Camel - Jetty
camel.component.jetty.keystore=${application.targetDirectory}${application.ssl.key-store.name}
camel.component.jetty.ssl-password=${application.ssl.key-store-password}
camel.component.jetty.ssl-key-password=${application.ssl.key-password}

application.basedir=@application.basedir@

# Usage Control App
spring.ids.ucapp.baseUrl=${UC_DATAAPP_URI}
spring.ids.ucapp.healthUrl=${UC_DATAAPP_HEALTH_URI}
application.isEnabledUsageControl=${UC_DATAAPP_ENABLED}
# mydata or platoon
application.usageControlVersion=platoon

#Technical headers
application.technicalHeaders=header,Is-Enabled-DataApp-WebSocket,payload,Forward-To,Payload-Content-Type,Host

#SelfDescription
#API management credentials
application.user.api.username=apiUser
# 'password' encoded value
application.user.api.password=$2a$10$MQ5grDaIqDpBjMlG78PFduv.AMRe9cs0CNm/V4cgUubrqdGTFCH3m
#number of consecutive failed attempts
application.user.lock.maxattempts=5
# duration for how long user will be locked
application.user.lock.duration=30
# time unit used for locking user, possible values are: SECONDS,MINUTES,HOURS,DAYS
application.user.lock.unit=MINUTES

##Password Validator
#Password length should be in between (for example) 8 and 16 characters, 0 disable rule
application.password.validator.minLength=8
application.password.validator.maxLength=16
#At least one Upper-case character, 0 disable rule
application.password.validator.minUpperCase=1
#At least one Lower-case character, 0 disable rule
application.password.validator.minLowerCase=1
#At least one digit, 0 disable rule
application.password.validator.minDigit=1
#At least one special character, 0 disable rule
application.password.validator.minSpecial=1

application.selfdescription.description=Data Provider Connector description
application.selfdescription.title=Data Provider Connector title
application.selfdescription.curator=http://provider.curatorURI.com
application.selfdescription.maintainer=http://provider.maintainerURI.com
application.selfdescription.filelocation=/home/nobody/data/sd
application.selfdescription.inboundModelVersion=4.0.0,4.1.0,4.1.2,4.2.0,4.2.1,4.2.2,4.2.3,4.2.4,4.2.5,4.2.6,4.2.7

#For logging the response over WSS set to DEBUG, else leave empty
#logging.level.it.eng.idsa.businesslogic.processor.receiver=
